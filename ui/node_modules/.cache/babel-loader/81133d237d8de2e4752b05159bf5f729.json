{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matth\\\\Documents\\\\Dev\\\\MarioMusic\\\\Mario-Music-MERN\\\\ui\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { setGlobal, addCallback, useState, useGlobal } from 'reactn';\nimport React, { useEffect } from 'react';\nimport axios from \"axios\";\nimport Navbar from \"./components/Navbar\";\nimport SongList from './components/SongList';\nimport MusicMakerContainer from \"./components/MusicMakerContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Fixes audio delay in Safari \n  const AudioContext = window.AudioContext || window.webkitAudioContext;\n  const audioCtx = new AudioContext();\n  const numberOfColumns = 200;\n  const [noteLength, setNoteLength] = useState([]);\n  const [copyInstrumentLists, setCopyInstrumentLists] = useState(\"copyInstrumentLists\");\n  const [notes, setNotes] = useGlobal([]);\n  const [token, setToken] = useGlobal(\"token\");\n  const [newSong, setNewSong] = useGlobal(\"newSong\");\n  const [copyArraysLists, setCopyArraysLists] = useGlobal(\"copyArraysLists\");\n  const [copyNoteLength, setCopyNoteLength] = useState(\"copyNoteLength\");\n  const [tempo, setTempo] = useGlobal(\"tempo\");\n  const [songWasReset, setSongWasReset] = useGlobal(\"songWasReset\");\n  let notesArray = [];\n  let instrument = 'piano';\n  let keepGoing = true;\n  let halfNoteTempo = 120000 / tempo;\n  let quarterNoteTempo = 60000 / tempo;\n  let eighthNoteTempo = 30000 / tempo;\n  let sixteenthNoteTempo = 15000 / tempo;\n  useEffect(() => {\n    setNullInArrays();\n  });\n  let counter = 0;\n  useEffect(() => {\n    setNewSong(false);\n\n    for (let i = 1; i < numberOfColumns + 1; i++) {\n      // setNotes(notes => [...notes, ...notesArray])\n      counter += 1;\n      if (counter === 9) counter = 1;\n      let note = 'C';\n      if (counter === 1) note = 'CHigh';else if (counter === 2) note = 'B';else if (counter === 3) note = 'A';else if (counter === 4) note = 'G';else if (counter === 5) note = 'F';else if (counter === 6) note = 'E';else if (counter === 7) note = 'D';else if (counter === 8) note = 'C';\n      let newNote = {\n        name: note,\n        img: './images/note.gif',\n        instrument: 'piano'\n      };\n      notesArray.push(newNote);\n      setNotes(notesArray);\n      let newNoteLength = {\n        length: 1000,\n        name: '1/4'\n      };\n      if (counter % 8 === 0) noteLength.push(newNoteLength);\n    }\n\n    setCopyArraysLists(arraysLists);\n    setCopyNoteLength(noteLength);\n    setCopyInstrumentLists(instrument);\n  }, []);\n  let playList0 = [];\n  let playList1 = [];\n  let playList2 = [];\n  let playList3 = [];\n  let playList4 = [];\n  let playList5 = [];\n  let playList6 = [];\n  let playList7 = [];\n  let soundTypeList0 = [];\n  let soundTypeList1 = [];\n  let soundTypeList2 = [];\n  let soundTypeList3 = [];\n  let soundTypeList4 = [];\n  let soundTypeList5 = [];\n  let soundTypeList6 = [];\n  let soundTypeList7 = [];\n  let arraysLists = [playList0, playList1, playList2, playList3, playList4, playList5, playList6, playList7];\n  let instrumentLists = [soundTypeList0, soundTypeList1, soundTypeList2, soundTypeList3, soundTypeList4, soundTypeList5, soundTypeList6, soundTypeList7];\n\n  const setNullInArrays = () => {\n    for (let i = 0; i < numberOfColumns; i++) {\n      playList0.push(null);\n      playList1.push(null);\n      playList2.push(null);\n      playList3.push(null);\n      playList4.push(null);\n      playList5.push(null);\n      playList6.push(null);\n      playList7.push(null);\n    }\n  };\n\n  let loopCounter = 0;\n\n  const updateNoteDuration = () => {\n    // get the note length from object and adjust to tempo\n    if (copyNoteLength[loopCounter].name === '1/4') {\n      return quarterNoteTempo;\n    } else if (copyNoteLength[loopCounter].name === '1/8') {\n      return eighthNoteTempo;\n    } else if (copyNoteLength[loopCounter].name === '1/16') {\n      return sixteenthNoteTempo;\n    } else if (copyNoteLength[loopCounter].name === '1/2') {\n      return halfNoteTempo;\n    }\n  };\n\n  const playSong = () => {\n    if (songWasReset) {\n      keepGoing = true;\n      playInProgress = true;\n      setSongWasReset(false);\n    } // handles loading in a song\n\n\n    if (newSong === true) {\n      setNewSong(false);\n      arraysLists = copyArraysLists;\n      instrumentLists = copyInstrumentLists;\n      setNoteLength(copyNoteLength);\n      playList0 = arraysLists[0];\n      playList1 = arraysLists[1];\n      playList2 = arraysLists[2];\n      playList3 = arraysLists[3];\n      playList4 = arraysLists[4];\n      playList5 = arraysLists[5];\n      playList6 = arraysLists[6];\n      playList7 = arraysLists[7];\n    } else {\n      setCopyNoteLength(noteLength);\n    }\n\n    if (keepGoing) {\n      scrollToTarget(loopCounter);\n      console.log('are we running?');\n      console.log(loopCounter);\n\n      if (playList0[loopCounter] === undefined) {} else {\n        new Audio(`./sounds/${instrumentLists[0][loopCounter]}/${playList0[loopCounter]}${instrumentLists[0][loopCounter]}.mp3`).play(); // gsap.to(\"#note1\", {y: \"-1rem\", ease: \"none\", duration: .3})\n        // gsap.to(\"#note1\", {delay: .3, y: \"-0rem\", ease: \"none\", duration: .3})\n      } // if (playList1[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[1][loopCounter]}/${playList1[loopCounter]}${instrumentLists[1][loopCounter]}.mp3`).play()}\n      // if (playList2[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[2][loopCounter]}/${playList2[loopCounter]}${instrumentLists[2][loopCounter]}.mp3`).play()}\n      // if (playList3[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[3][loopCounter]}/${playList3[loopCounter]}${instrumentLists[3][loopCounter]}.mp3`).play()}\n      // if (playList4[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[4][loopCounter]}/${playList4[loopCounter]}${instrumentLists[4][loopCounter]}.mp3`).play()}\n      // if (playList5[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[5][loopCounter]}/${playList5[loopCounter]}${instrumentLists[5][loopCounter]}.mp3`).play()}\n      // if (playList6[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[6][loopCounter]}/${playList6[loopCounter]}${instrumentLists[6][loopCounter]}.mp3`).play()}\n      // if (playList7[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[7][loopCounter]}/${playList7[loopCounter]}${instrumentLists[7][loopCounter]}.mp3`).play()}\n\n\n      loopCounter += 1;\n    } else {\n      loopCounter = 0;\n    } // Function Calls itself to repeat playlist\n\n\n    setTimeout(playSong, updateNoteDuration());\n  };\n\n  let noteSection = document.getElementById('noteSection');\n  let distance = -40;\n  let playInProgress = false;\n\n  const scrollToTarget = durationCounter => {\n    distance += 40;\n    playInProgress = true;\n    let startTime = null;\n    let requestId;\n\n    const loop = function (currentTime) {\n      if (!startTime) {\n        startTime = currentTime;\n      } // Elapsed time in miliseconds\n\n\n      let time = currentTime - startTime;\n      let percent = Math.min(time / updateNoteDuration()); // console.log(noteLength[durationCounter], 'counter', durationCounter)s\n      // noteSection.scrollTo(startPos + diff * percent, 0);\n\n      noteSection.scrollTo(distance + 40 * percent, 0);\n\n      if (time < updateNoteDuration() && playInProgress === true) {\n        // Continue moving\n        requestId = window.requestAnimationFrame(loop);\n      } else if (!playInProgress) {\n        window.cancelAnimationFrame(requestId);\n        noteSection.scrollTo(0, 0);\n        distance = -40;\n      }\n    };\n\n    requestId = window.requestAnimationFrame(loop);\n  };\n\n  const logIt = () => {};\n\n  const stopBtn = () => {\n    keepGoing = false;\n    playInProgress = false;\n    setSongWasReset(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logIt,\n        children: \"LOG IT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SongList, {\n        notes: notes,\n        setNotes: setNotes,\n        arraysLists: arraysLists,\n        instrumentLists: instrumentLists,\n        noteLength: noteLength,\n        setCopyArraysLists: setCopyArraysLists,\n        setCopyNoteLength: setCopyNoteLength,\n        setCopyInstrumentLists: setCopyInstrumentLists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), notes && /*#__PURE__*/_jsxDEV(MusicMakerContainer, {\n        notes: notes,\n        arraysLists: arraysLists,\n        instrumentLists: instrumentLists,\n        playSong: playSong,\n        noteLength: noteLength,\n        stopBtn: stopBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), \"        \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 26\n      }, this), \"        \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 43\n      }, this), \"        \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 60\n      }, this), \"        \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 77\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopBtn,\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"3b4KOXAAT5xiDDdrt8lnicRkQFw=\", false, function () {\n  return [useGlobal, useGlobal, useGlobal, useGlobal, useGlobal, useGlobal];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["setGlobal","addCallback","useState","useGlobal","React","useEffect","axios","Navbar","SongList","MusicMakerContainer","App","AudioContext","window","webkitAudioContext","audioCtx","numberOfColumns","noteLength","setNoteLength","copyInstrumentLists","setCopyInstrumentLists","notes","setNotes","token","setToken","newSong","setNewSong","copyArraysLists","setCopyArraysLists","copyNoteLength","setCopyNoteLength","tempo","setTempo","songWasReset","setSongWasReset","notesArray","instrument","keepGoing","halfNoteTempo","quarterNoteTempo","eighthNoteTempo","sixteenthNoteTempo","setNullInArrays","counter","i","note","newNote","name","img","push","newNoteLength","length","arraysLists","playList0","playList1","playList2","playList3","playList4","playList5","playList6","playList7","soundTypeList0","soundTypeList1","soundTypeList2","soundTypeList3","soundTypeList4","soundTypeList5","soundTypeList6","soundTypeList7","instrumentLists","loopCounter","updateNoteDuration","playSong","playInProgress","scrollToTarget","console","log","undefined","Audio","play","setTimeout","noteSection","document","getElementById","distance","durationCounter","startTime","requestId","loop","currentTime","time","percent","Math","min","scrollTo","requestAnimationFrame","cancelAnimationFrame","logIt","stopBtn"],"sources":["C:/Users/matth/Documents/Dev/MarioMusic/Mario-Music-MERN/ui/src/App.js"],"sourcesContent":["import { setGlobal, addCallback, useState, useGlobal } from 'reactn'\nimport React, { useEffect } from 'react'\nimport axios from \"axios\"\n\nimport Navbar from \"./components/Navbar\";\nimport SongList from './components/SongList';\nimport MusicMakerContainer from \"./components/MusicMakerContainer\";\n\n\nfunction App() {\n  //Fixes audio delay in Safari \n  const AudioContext = window.AudioContext || window.webkitAudioContext;\n  const audioCtx = new AudioContext();\n\n  const numberOfColumns = 200\n  const [noteLength, setNoteLength] = useState([])\n  const [copyInstrumentLists, setCopyInstrumentLists] = useState(\"copyInstrumentLists\")\n  const [notes, setNotes ] = useGlobal([])  \n  const [token, setToken] = useGlobal(\"token\")\n  const [newSong, setNewSong] = useGlobal(\"newSong\")\n  const [copyArraysLists, setCopyArraysLists] = useGlobal(\"copyArraysLists\")\n  const [copyNoteLength, setCopyNoteLength] = useState(\"copyNoteLength\")\n\n  const [tempo, setTempo] = useGlobal(\"tempo\")\n  const [songWasReset, setSongWasReset] = useGlobal(\"songWasReset\")\n\n  let notesArray = []\n  let instrument = 'piano'\n\n  let keepGoing = true\n\n  let halfNoteTempo =  120000 / tempo\n  let quarterNoteTempo = 60000 / tempo\n  let eighthNoteTempo = 30000 / tempo\n  let sixteenthNoteTempo = 15000 / tempo\n\n\n\n  useEffect(() => { \n    setNullInArrays()\n  })\n\n  let counter = 0\n\n  useEffect(() => {\n    setNewSong(false)\n    for (let i=1; i < numberOfColumns +1; i++) {\n\n      // setNotes(notes => [...notes, ...notesArray])\n      counter += 1\n      if (counter === 9) counter = 1\n\n      let note = 'C'\n      if (counter === 1) note = 'CHigh'\n      else if (counter === 2) note ='B'\n      else if (counter === 3) note ='A'\n      else if (counter === 4) note ='G'\n      else if (counter === 5) note ='F'\n      else if (counter === 6) note ='E'\n      else if (counter === 7) note ='D'\n      else if (counter === 8) note ='C'\n      \n      let newNote = {\n        name: note,\n        img: './images/note.gif',\n        instrument: 'piano'\n      }\n      notesArray.push(newNote)\n      setNotes(notesArray)\n\n      let newNoteLength = {\n        length: 1000,\n        name: '1/4'\n      }\n      if (counter % 8 === 0) noteLength.push(newNoteLength)\n\n      \n    }\n    setCopyArraysLists(arraysLists)\n    setCopyNoteLength(noteLength)\n    setCopyInstrumentLists(instrument)\n\n  }, [])\n\n\n  let playList0 = []\n  let playList1 = []\n  let playList2 = []\n  let playList3 = []\n  let playList4 = []\n  let playList5 = []\n  let playList6 = []\n  let playList7 = []\n  let soundTypeList0 = []\n  let soundTypeList1 = []\n  let soundTypeList2 = []\n  let soundTypeList3 = []   \n  let soundTypeList4 = []   \n  let soundTypeList5 = []   \n  let soundTypeList6 = []   \n  let soundTypeList7 = []  \n\n  let arraysLists =[\n    playList0, playList1, playList2, playList3, playList4, playList5, playList6, playList7\n  ]\n\n  let instrumentLists = [\n    soundTypeList0, soundTypeList1, soundTypeList2, soundTypeList3, soundTypeList4, soundTypeList5, soundTypeList6, soundTypeList7\n  ]\n\n  const setNullInArrays = () => {\n    for (let i=0; i<numberOfColumns; i++){\n      playList0.push(null)\n      playList1.push(null)\n      playList2.push(null)\n      playList3.push(null)\n      playList4.push(null)\n      playList5.push(null)\n      playList6.push(null)\n      playList7.push(null)\n    }\n  }\n\n  let loopCounter = 0\n\n\n  const updateNoteDuration = () => {\n      // get the note length from object and adjust to tempo\n      if (copyNoteLength[loopCounter].name === '1/4') {\n        return quarterNoteTempo \n      }\n      else if (copyNoteLength[loopCounter].name === '1/8') {\n        return eighthNoteTempo \n      }\n      else if (copyNoteLength[loopCounter].name === '1/16') {\n        return sixteenthNoteTempo \n      }\n      else if (copyNoteLength[loopCounter].name === '1/2') {\n        return halfNoteTempo\n      }\n  }\n\n  const playSong = () => {\n    if (songWasReset){\n      keepGoing = true;\n      playInProgress = true\n      setSongWasReset(false)\n    }\n\n\n    // handles loading in a song\n    if (newSong === true){\n      setNewSong(false)\n      arraysLists = copyArraysLists\n      instrumentLists = copyInstrumentLists\n      setNoteLength(copyNoteLength)\n\n      playList0 = arraysLists[0]\n      playList1 = arraysLists[1]\n      playList2 = arraysLists[2]\n      playList3 = arraysLists[3]\n      playList4 = arraysLists[4]\n      playList5 = arraysLists[5]\n      playList6 = arraysLists[6]\n      playList7 = arraysLists[7]  \n    }\n    else{\n      setCopyNoteLength(noteLength)\n    }\n\n    if(keepGoing) {\n      scrollToTarget(loopCounter)\n      \n      console.log('are we running?')\n      console.log(loopCounter)\n      if (playList0[loopCounter] === undefined){}\n      else {\n        new Audio(`./sounds/${instrumentLists[0][loopCounter]}/${playList0[loopCounter]}${instrumentLists[0][loopCounter]}.mp3`).play()\n        // gsap.to(\"#note1\", {y: \"-1rem\", ease: \"none\", duration: .3})\n        // gsap.to(\"#note1\", {delay: .3, y: \"-0rem\", ease: \"none\", duration: .3})\n      }\n\n      // if (playList1[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[1][loopCounter]}/${playList1[loopCounter]}${instrumentLists[1][loopCounter]}.mp3`).play()}\n\n      // if (playList2[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[2][loopCounter]}/${playList2[loopCounter]}${instrumentLists[2][loopCounter]}.mp3`).play()}\n\n      // if (playList3[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[3][loopCounter]}/${playList3[loopCounter]}${instrumentLists[3][loopCounter]}.mp3`).play()}\n\n      // if (playList4[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[4][loopCounter]}/${playList4[loopCounter]}${instrumentLists[4][loopCounter]}.mp3`).play()}\n\n      // if (playList5[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[5][loopCounter]}/${playList5[loopCounter]}${instrumentLists[5][loopCounter]}.mp3`).play()}\n\n      // if (playList6[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[6][loopCounter]}/${playList6[loopCounter]}${instrumentLists[6][loopCounter]}.mp3`).play()}\n\n      // if (playList7[loopCounter] === undefined){}\n      // else {new Audio(`./sounds/${instrumentLists[7][loopCounter]}/${playList7[loopCounter]}${instrumentLists[7][loopCounter]}.mp3`).play()}\n      \n      loopCounter += 1\n    }\n    else{\n      loopCounter = 0\n    }\n\n    // Function Calls itself to repeat playlist\n    setTimeout(playSong, updateNoteDuration());\n  }\n\n\n\n  let noteSection = document.getElementById('noteSection')\n\n  let distance = -40\n  let playInProgress = false\n\n  const scrollToTarget = (durationCounter) => {\n    distance += 40\n    playInProgress = true\n    let startTime = null;\n    let requestId;\n    \n    const loop = function (currentTime) {\n        if (!startTime) {\n            startTime = currentTime;\n        }\n\n        // Elapsed time in miliseconds\n        let time = currentTime - startTime;\n\n        let percent = Math.min(time / updateNoteDuration());\n        // console.log(noteLength[durationCounter], 'counter', durationCounter)s\n\n        // noteSection.scrollTo(startPos + diff * percent, 0);\n        noteSection.scrollTo(distance + 40 * percent, 0);\n\n        if (time < updateNoteDuration() && playInProgress === true) {\n            // Continue moving\n            requestId = window.requestAnimationFrame(loop);\n\n        } \n        else if (!playInProgress)  {\n            window.cancelAnimationFrame(requestId);\n            noteSection.scrollTo(0, 0)\n            distance = -40\n        }\n    };\n    requestId = window.requestAnimationFrame(loop);\n  }\n\n\n  const logIt = () => {\n\n  }\n\n  \n  const stopBtn = () => {\n    keepGoing = false;\n    playInProgress = false\n    setSongWasReset(true)\n  }\n\n\n    return (\n      <>\n      <div className=\"App\">\n        <Navbar />\n\n        <button onClick={logIt}>LOG IT</button>\n        <SongList notes={notes} setNotes={setNotes} arraysLists={arraysLists} instrumentLists={instrumentLists} noteLength={noteLength} setCopyArraysLists={setCopyArraysLists} setCopyNoteLength={setCopyNoteLength} setCopyInstrumentLists={setCopyInstrumentLists}/>\n\n        {notes && <MusicMakerContainer  notes={notes} arraysLists={arraysLists} instrumentLists={instrumentLists} playSong={playSong} noteLength={noteLength} stopBtn={stopBtn}/> }\n        <br></br>        <br></br>        <br></br>        <br></br>        <br></br>\n        <br></br>\n        <button onClick={stopBtn}>reset</button>\n      </div>\n\n      </>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}